---

stages:
  - test
  - build
  - accessories


variables:
  SSH_OPTIONS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i http-space.key"
  DOCS_UPLOAD: "mprchlik@liver3.lab.eng.brq.redhat.com:/var/www/gluetool/docs/citool"
  COVERAGE_UPLOAD: "mprchlik@liver3.lab.eng.brq.redhat.com:/var/www/gluetool/coverage/citool"

image: "docker-registry.engineering.redhat.com/baseos-ci/citool-gitlab-ci"


#
# Runs before each and every pipeline job.
#
before_script:
  # Following steps are now covered by CI docker image:
  #
  #  - yum -y install git make python-setuptools gcc python-devel krb5-devel libxml2-devel postgresql-devel openssl-devel libcurl-devel python-rpm
  #  - (curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py" && python get-pip.py && rm -f get-pip.py)
  #  - pip install -U setuptools
  #  - pip install ansible virtualenv

  - echo "$HTTP_SPACE_KEY" > http-space.key
  - chmod u=rw,go= http-space.key

  - echo "$TOWER_CLI_CONFIG" > ~/.tower_cli.cfg
  - chmod u=rw,go= ~/.tower_cli.cfg


#
# TEST steps
#

# Run unit tests
#
# Note: this step also generates coverage report (HTML).
unit-tests:
  stage: test
  script:
    - pip install tox
    - tox -e py27-unit-tests -- --cov=libci --cov-report=html:coverage-report
  artifacts:
    paths:
      - coverage-report

# Static analysis - pylint, flake8
static-analysis:
  stage: test
  script:
    - pip install tox
    - tox -e py27-static-analysis

# Static analysis - coala
#
# Note: coala integration is better done directly via gitlab's docker support
static-analysis-coala:
  stage: test
  image: coala/base
  script:
    - /usr/bin/coala --non-interactive --config .coafile

# Generate documentation from the sources
#
# Note: executed for all commits in all branches to make sure it is actually possible
# to generate the documentation - serves as a sort of a "test" on its own. citool
# uses docstrings to generate command-line help, it is useful to check whether these
# docstrings are readable and sane.
generate-docs:
  stage: test
  script:
    - pip install tox
    - tox -e py27-doctest -- ./docs
  artifacts:
    paths:
      - .tox/py27-doctest/tmp/docs/build/html

#
# BUILD steps
#
# We're not building anything in the pipeline, just triggering jobs via AWX

# Trigger "[BaseOS CI] [gluetool] Build citool Python packages"
build-python-packages:
  stage: build
  only:
    - gluetoolize-gluetool@baseos-qe/citool
  script:
    - pip install ansible-tower-cli==3.2.0
    - tower-cli job launch --monitor -J 17

#
# ACCESSORIES steps
#

# Upload documentation to the remote location
upload-docs:
  stage: accessories
  only:
    - gluetoolize-citool@baseos-qe/citool
  dependencies:
    - generate-docs
  script:
    - rsync -avz -e "ssh $SSH_OPTIONS" .tox/py27-doctest/tmp/docs/build/html/ $DOCS_SPACE


# Upload coverage report to the remote location
upload-coverage:
  stage: accessories
  only:
    - gluetoolize-citool@baseos-qe/citool
  dependencies:
    - unit-tests
  script:
    - rsync -avz -e "ssh $SSH_OPTIONS" coverage-report/ $COVERAGE_SPACE
