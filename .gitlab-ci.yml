---

stages:
  - test
  - build-python
  - build-rpm
  - build-docker
  - deploy-staging
  - accessories


variables:
  SSH_OPTIONS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i http-space.key"
  DOCS_SPACE: "mprchlik@liver3.lab.eng.brq.redhat.com:/home/mprchlik/webspace/testing/docs/gluetool-modules"
  COVERAGE_SPACE: "mprchlik@liver3.lab.eng.brq.redhat.com:/home/mprchlik/webspace/testing/coverage/gluetool-modules"
  PUBLISH_JOB: "20"  # [BaseOS CI] Publish Python package
  RPM_JOB: "24"  # [BaseOS CI] Build RPM packages
  DOCKER_JOB: "31"  # [BaseOS CI] Build Docker images
  DEPLOY_JOB: "10"  # [BaseOS CI] [staging] [deploy] Tooling

  # This one keeps popping up again and again and again... It works locally while tox is not
  # psssing this variable to its command... That should not work at all :/
  PYCURL_SSL_LIBRARY: nss


image: "docker-registry.engineering.redhat.com/baseos-ci/citool-gitlab-ci"


#
# Runs before each and every pipeline job.
#
before_script:
  # This one is *not* handled by CI image because it depends on repository being cloned in the container
  - echo "$HTTP_SPACE_KEY" > http-space.key
  - chmod u=rw,go= http-space.key

  - echo "$TOWER_CLI_CONFIG" > ~/.tower_cli.cfg
  - chmod u=rw,go= ~/.tower_cli.cfg


#
# TEST steps
#

# Run unit tests
#
# Note: this step also generates coverage report (HTML).
unit-tests:
  stage: test
  script:
    - tox -e py27-unit-tests -- --cov=gluetool_modules --cov-report=html:coverage-report
  artifacts:
    paths:
      - coverage-report

# Static analysis - pylint, flake8
static-analysis:
  stage: test
  script:
    - tox -e py27-static-analysis

# Static analysis - coala
#
# Note: coala integration is better done directly via gitlab's docker support
static-analysis-coala:
  stage: test
  image: coala/base
  script:
    - /usr/bin/coala --non-interactive --config .coafile

# Run integration tests
#
# Note: integration tests have - so far - the configuration available. While making use
# of dry-run levels, they may be able to test integration of modules or even whole pipelines.
#
# Might deserve a better integration with CI process, this will run into issues when testing
# against changes in the configuration that were not merged yet :/
integration-tests:
  stage: test
  script:
    - wget --no-check-certificate -O /etc/pki/ca-trust/source/anchors/RH-IT-Root-CA.crt https://password.corp.redhat.com/RH-IT-Root-CA.crt
    - update-ca-trust
    - git clone https://gitlab.cee.redhat.com/baseos-qe/citool-config.git ~/.citool.d
    - pushd ~/.citool.d && git checkout production && popd
    - tox -e py27-integration-tests -- --integration-config=$(echo ~/.citool.d)

# Generate documentation from the sources
#
# Note: executed for all commits in all branches to make sure it is actually possible
# to generate the documentation - serves as a sort of a "test" on its own. citool
# uses docstrings to generate command-line help, it is useful to check whether these
# docstrings are readable and sane.
generate-docs:
  stage: test
  script:
    - tox -e py27-doctest -- ./docs
  artifacts:
    paths:
      - .tox/py27-doctest/tmp/docs/build/html


#
# BUILD steps
#

# Upload package to devpi
build-python-package:
  stage: build-python
  only:
    - master@baseos-qe/gluetool-modules
  script:
    - tower-cli job launch -J "$PUBLISH_JOB" --monitor --extra-vars "DEVPI_INDEX=$DEVPI_INDEX"
                                                       --extra-vars "DEVPI_USERNAME=$DEVPI_USERNAME"
                                                       --extra-vars "DEVPI_PASSWORD=$DEVPI_PASSWORD"
                                                       --extra-vars "DEVPI_URL=$DEVPI_URL"
                                                       --extra-vars "GIT_REPO=https://gitlab.cee.redhat.com/baseos-qe/gluetool-modules.git"
                                                       --extra-vars "GIT_VERSION=master" | tee tower_output.log
    # workaround for tower-cli / AWX bug for not returning correct return code from workflow jobs
    - grep 'failed' tower_output.log && { echo 'tower-cli seems to have failed!'; exit 1; }

# Trigger RPM build
build-rpm-packages:
  stage: build-rpm
  only:
    - master@baseos-qe/gluetool-modules
  script:
    - tower-cli workflow_job launch -W "$RPM_JOB" --monitor --extra-vars "COPR_LOGIN=$COPR_LOGIN"
                                                            --extra-vars "COPR_USERNAME=$COPR_USERNAME"
                                                            --extra-vars "COPR_TOKEN=$COPR_TOKEN"
                                                            --extra-vars "COPR_URL=$COPR_URL" | tee tower_output.log
    - grep 'failed' tower_output.log && { echo 'tower-cli seems to have failed!'; exit 1; }

# Trigger Docker build
build-docker-images:
  stage: build-docker
  only:
    - master@baseos-qe/gluetool-modules
  script:
    - tower-cli workflow_job launch -W "$DOCKER_JOB" --monitor --extra-vars "DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST"
                                                               --extra-vars "DOCKER_REGISTRY_PROJECT=$DOCKER_REGISTRY_PROJECT"
                                                               --extra-vars "DOCKER_REGISTRY_TOKEN=$DOCKER_REGISTRY_TOKEN" | tee tower_output.log
    - grep 'failed' tower_output.log && { echo 'tower-cli seems to have failed!'; exit 1; }

# Trigger staging deployment
deploy-to-staging:
  stage: deploy-staging
  only:
    - master@baseos-qe/gluetool-modules
  script:
    - tower-cli job launch -J "$DEPLOY_JOB" --monitor | tee tower_output.log
    - grep 'failed' tower_output.log && { echo 'tower-cli seems to have failed!'; exit 1; }


#
# ACCESSORIES steps
#

# Upload documentation to the remote location
upload-docs:
  stage: accessories
  only:
    - master@baseos-qe/gluetool-modules
  dependencies:
    - generate-docs
  script:
    - rsync -avz -e "ssh $SSH_OPTIONS" .tox/py27-doctest/tmp/docs/build/html/ $DOCS_SPACE


# Upload coverage report to the remote location
upload-coverage:
  stage: accessories
  only:
    - master@baseos-qe/gluetool-modules
  dependencies:
    - unit-tests
  script:
    - rsync -avz -e "ssh $SSH_OPTIONS" coverage-report/ $COVERAGE_SPACE
