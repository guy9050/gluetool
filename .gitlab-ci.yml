---

stages:
  - test
  - build-rpm
  - build-docker
  - deploy-staging
  - accessories
  - status


variables:
  MODULES_REPO_ID: "8896"
  MODULES_REPO_TOKEN: "bSBxviSe_8p3ZrDNsZa4"
  GITLAB_API_URL: "https://gitlab.cee.redhat.com/api/v4/projects/${MODULES_REPO_ID}/"

  SSH_OPTIONS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i http-space.key"
  DOCS_SPACE: "mprchlik@liver3.lab.eng.brq.redhat.com:/home/mprchlik/webspace/testing/docs/gluetool-modules"
  COVERAGE_SPACE: "mprchlik@liver3.lab.eng.brq.redhat.com:/home/mprchlik/webspace/testing/coverage/gluetool-modules"

  DOCS_URL: "http://liver3.lab.eng.brq.redhat.com/gluetool/testing/docs/gluetool-modules"
  COVERAGE_URL: "http://liver3.lab.eng.brq.redhat.com/gluetool/testing/coverage/gluetool-modules"

  # This one keeps popping up again and again and again... It works locally while tox is not
  # psssing this variable to its command... That should not work at all :/
  PYCURL_SSL_LIBRARY: nss

  MERGE_REQUEST_STATUS: >
    ## Merge Request Status for ${CI_COMMIT_SHA}

    [Documentation](${DOCS_URL}-${CI_COMMIT_REF_NAME}/) | [Coverage](${COVERAGE_URL}-${CI_COMMIT_REF_NAME}/)

image: "docker-registry.engineering.redhat.com/baseos-ci/baseosci-gitlab-cicd-centos7"


#
# Runs before each and every pipeline job.
#
before_script:
  # This one is *not* handled by CI image because it depends on repository being cloned in the container
  - echo "$HTTP_SPACE_KEY" > http-space.key
  - chmod u=rw,go= http-space.key

  - echo "$TOWER_CLI_CONFIG" > ~/.tower_cli.cfg
  - chmod u=rw,go= ~/.tower_cli.cfg

  # virtualenv, running under tox, tries to download the most recent versions of several packages,
  # including pip - and pip 19 removed --process-dependency-links option, which gluetool-modules
  # use. Until we get rid of it, we need a workaround :/
  - pip install tox-virtualenv-no-download

#
# TEST steps
#

# Run unit tests
#
# Note: this step also generates coverage report (HTML).
unit-tests:
  stage: test
  script:
    - tox -e py27-unit-tests -- --cov=gluetool_modules --cov-report=html:coverage-report
  artifacts:
    paths:
      - coverage-report
  tags:
    - shared

# Static analysis - pylint, flake8
static-analysis:
  stage: test
  script:
    - tox -e py27-static-analysis
  tags:
    - shared

# Static analysis - coala
#
# Note: coala integration is better done directly via gitlab's docker support
static-analysis-coala:
  stage: test
  image: coala/base
  script:
    - /usr/bin/coala --non-interactive --config .coafile
  tags:
    - shared

# Static analysis - type checks
type-check:
  stage: test
  script:
    - tox -e type-check
  tags:
    - shared

# Run integration tests
#
# Note: integration tests have - so far - the configuration available. While making use
# of dry-run levels, they may be able to test integration of modules or even whole pipelines.
#
# Might deserve a better integration with CI process, this will run into issues when testing
# against changes in the configuration that were not merged yet :/
integration-tests:
  stage: test
  script:
    - wget --no-check-certificate -O /etc/pki/ca-trust/source/anchors/RH-IT-Root-CA.crt https://password.corp.redhat.com/RH-IT-Root-CA.crt
    - update-ca-trust
    - git clone https://gitlab.cee.redhat.com/baseos-qe/citool-config.git ~/.citool.d
    - pushd ~/.citool.d && git checkout production && popd
    - tox -e py27-integration-tests -- --integration-config=$(echo ~/.citool.d)
  tags:
    - shared

# Generate documentation from the sources
#
# Note: executed for all commits in all branches to make sure it is actually possible
# to generate the documentation - serves as a sort of a "test" on its own. citool
# uses docstrings to generate command-line help, it is useful to check whether these
# docstrings are readable and sane.
generate-docs:
  stage: test
  script:
    - tox -e py27-doctest -- ./docs
  artifacts:
    paths:
      - .tox/py27-doctest/tmp/docs/build/html
  tags:
    - shared


#
# BUILD steps
#

# Trigger RPM build
build-rpm-packages:
  stage: build-rpm
  only:
    - master@baseos-qe/gluetool-modules
  script:
    - tower-cli job launch --monitor -J "[BaseOS CI] [build] [rpm] citool-modules-full"
  tags:
    - shared

build-rpm-packages-devel:
  stage: build-rpm
  only:
    - devel@baseos-qe/gluetool-modules
  script:
    - tower-cli job launch --monitor -J "[BaseOS CI] [build] [rpm] citool-modules-full-devel"
  tags:
    - shared

# Trigger Docker build
build-docker-images:
  stage: build-docker
  only:
    - master@baseos-qe/gluetool-modules
  script:
    - tower-cli workflow_job launch --monitor -W "[BaseOS CI] [build] [docker] Production chain - Fedora 29" | tee tower_output.log
    - grep 'failed' tower_output.log && { echo 'At least one of subtasks failed!'; exit 1; } || exit 0
  tags:
    - shared

build-docker-images-devel:
  stage: build-docker
  only:
    - devel@baseos-qe/gluetool-modules
  script:
    - tower-cli workflow_job launch --monitor -W "[BaseOS CI] [build] [docker] Devel chain - Fedora 29" | tee tower_output.log
    - grep 'failed' tower_output.log && { echo 'At least one of subtasks failed!'; exit 1; } || exit 0
  tags:
    - shared

# Trigger staging deployment
deploy-to-staging:
  stage: deploy-staging
  only:
    - devel@baseos-qe/gluetool-modules
  script:
    - tower-cli job launch --monitor -J "[BaseOS CI] [deploy] [stage] Image"
  tags:
    - shared


#
# ACCESSORIES steps
#

# Upload documentation to the remote location
upload-docs:
  stage: accessories
  allow_failure: true
  dependencies:
    - generate-docs
  script:
    - rsync -avz -e "ssh $SSH_OPTIONS" .tox/py27-doctest/tmp/docs/build/html/ "${DOCS_SPACE}-${CI_COMMIT_REF_NAME}"
  tags:
    - shared


# Upload coverage report to the remote location
upload-coverage:
  stage: accessories
  allow_failure: true
  dependencies:
    - unit-tests
  script:
    - rsync -avz -e "ssh $SSH_OPTIONS" coverage-report/ "${COVERAGE_SPACE}-${CI_COMMIT_REF_NAME}"
  tags:
    - shared


# Add a status comment
update-status:
  stage: status
  allow_failure: true
  script:
    # Find out what the MR IID is
    - |
      curl --insecure --silent --header "Private-Token: $MODULES_REPO_TOKEN" "$GITLAB_API_URL/merge_requests?state=opened" | jq -r ".[]|select(.sha == \"${CI_COMMIT_SHA}\")|.iid" > merge-request-iid

    # Add the comment
    - |
      curl --insecure --silent --header "Private-Token: $MODULES_REPO_TOKEN" --request POST --data-binary "body=${MERGE_REQUEST_STATUS}" "$GITLAB_API_URL/merge_requests/$(cat merge-request-iid)/notes"
  tags:
    - shared
