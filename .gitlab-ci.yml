---

stages:
  - test
#  - build
  - deploy


variables:
  SSH_OPTIONS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i docs/citool-doc.key"
  DOCS_UPLOAD: "citool-doc@liver3.lab.eng.brq.redhat.com:/home/citool-doc/public_html"
  COVERAGE_UPLOAD: "citool-doc@liver3.lab.eng.brq.redhat.com:/home/citool-doc/public_html/coverage-report"


#
# Runs before each and every pipeline job.
#
before_script:
  - yum -y install git make python-setuptools gcc python-devel krb5-devel libxml2-devel postgresql-devel openssl-devel libcurl-devel python-rpm
  - (curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py" && python get-pip.py && rm -f get-pip.py)
  - pip install -U setuptools
  - pip install ansible virtualenv
  - chmod u=rw,go= docs/citool-doc.key


#
# TEST steps
#

# Run unit tests
#
# Note: this step also generates coverage report (HTML).
unit-tests:
  stage: test
  script:
    - pip install tox
    - tox -e py27 -- --cov=libci --cov-report=html:coverage-report
  artifacts:
    paths:
      - coverage-report


# Generate documentation from the sources
#
# Note: executed for all commits in all branches to make sure it is actually possible
# to generate the documentation - serves as a sort of a "test" on its own. citool
# uses docstrings to generate command-line help, it is useful to check whether these
# docstrings are readable and sane.
generate-docs:
  stage: test
  script:
    - virtualenv -p /usr/bin/python2.7 /tmp/virtualenv-citool
    - source /tmp/virtualenv-citool/bin/activate
    - /usr/bin/ansible-playbook install.yml
    - sphinx-apidoc -T -e -o docs/source/ libci/
    - python docs/generate-module-page.py
    - make -C docs/ html
  artifacts:
    paths:
      - docs/build/html


#
# BUILD steps
#

#build-rpm:
#  stage: build
#  only:
#    - master@baseos-qe/citool
#  allow_failure: true
#  script:
#    - pip install copr copr-cli simplejson
#    # we need to use python-requests from rpm to have update-ca-trust to work
#    - pip uninstall -y requests
#    - yum -y install python-requests rpm-build
#    # this script was developed for Common Criteria Certification and is used for a few python tools
#    - curl -so /usr/bin/build_python_project http://cc-git.lab.eng.brq.redhat.com/cgit/gov-cert-tools/plain/tools/build_python_project
#    - chmod +x /usr/bin/build_python_project
#    # RH IT Root CA is required for copr to work
#    - curl -sko /etc/pki/ca-trust/source/anchors/RH-IT-Root-CA.crt https://password.corp.redhat.com/RH-IT-Root-CA.crt
#    - update-ca-trust
#    # add copr config for the jenkins/baseos-jenkins.rhev-ci-vms.eng.rdu2.redhat.com@REDHAT.COM user
#    - mkdir ~/.config
#    - echo "W2NvcHItY2xpXQpsb2dpbiA9IFkyOXdjZz09IyNpbXZ4eWZibHFoa2dybWdzdHlmaAp1c2VybmFtZSA9IGplbmtpbnNfYmFzZW9zLWplbmtpbnMucmhldi1jaS12bXMuZW5nLnJkdTIucmVkaGF0LmNvbQp0b2tlbiA9IHJqb29lcmN2ZHdrcnh1eGptYmJ1YXNvb2lzdGp3bApjb3ByX3VybCA9IGh0dHBzOi8vY29wci5kZXZlbC5yZWRoYXQuY29tCg==" | base64 -d > ~/.config/copr
#    - cat ~/.config/copr
#    - build_python_project


#
# DEPLOY steps
#

# Upload documentation to the remote location
upload-docs:
  stage: deploy
  only:
    - master@baseos-qe/citool
  dependencies:
    - generate-docs
  script:
    - rsync -avz -e "ssh $SSH_OPTIONS" docs/build/html/ $DOCS_UPLOAD


# Upload coverage report to the remote location
upload-coverage:
  stage: deploy
  only:
    - master@baseos-qe/citool
  dependencies:
    - unit-tests
  script:
    - rsync -avz -e "ssh $SSH_OPTIONS" coverage-report/ $COVERAGE_UPLOAD

# Automated deployment on staging instance
staging-deploy:
  stage: deploy
  only:
    - master@baseos-qe/citool
  script:
    - yum -y install wget
    - pip install -r requirements.txt
    - wget --no-check-certificate -O /etc/pki/ca-trust/source/anchors/RH-IT-Root-CA.crt https://password.corp.redhat.com/RH-IT-Root-CA.crt
    - update-ca-trust
    - git clone https://gitlab.cee.redhat.com/baseos-qe/ansible-baseos-ci.git
    - cd ansible-baseos-ci
    - ansible-galaxy install -r requirements.yml
    - chmod 600 secrets/ci_id_rsa
    - ansible-playbook -l stage-citool -t citool_update infrastructure.yml
    - ansible-playbook -l stage-citool -t citool_jjb_update -e "citool_jjb_update=true citool_jjb_force_update=true" infrastructure.yml
