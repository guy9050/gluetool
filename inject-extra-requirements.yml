---

#
# There's is *no* way around it - some modules have extra requirements, like Python packages that
# are not available for pip, or system libraries that must be injected into the virtualenv. For
# distribution, we expect moduleinfos to solve this, providing necessary tasks to solve such
# situations when building RPMs or Docker images. In developer's environment, we have this playbook.
# It's up to the developers to keep it in sync with corresponding moduleinfos.
#

- hosts: 127.0.0.1
  connection: local

  vars:
    pycurl_ssl_library: "nss"
    citool_installation_method: "develop"

  tasks:
    #
    # Check whether installation runs inside an active virtualenv
    #
    - name: "Find virtualenv path"
      set_fact:
        virtualenv_path: "{{ lookup('env', 'VIRTUAL_ENV') }}"

    - fail:
        msg: "This playbook must run inside a virtual environment!"
      when: virtualenv_path == ""

    - debug:
        msg: "Running inside virtualenv '{{ virtualenv_path }}'"

    #
    # Check whether installation uses non-virtualenv ansible
    #
    - fail:
        msg: "This playbook must be run using system Ansible (/usr/bin/ansible-playbook or similar)!"
      when: ansible_playbook_python is not defined or not (ansible_playbook_python | match("^/usr/bin/python.*$"))

    #
    # Check necessary system packages
    #
    - name: "Check whether cURL development pieces are available"
      stat:
        path: "/usr/bin/curl-config"
      register: libcurl_devel_present

    - fail:
        msg: "Install package providing cURL development tools (e.g. libcurl-devel or similar)"
      when: libcurl_devel_present.stat.isreg is not defined or not libcurl_devel_present.stat.isreg

    - name: "Check whether libxml2 development pieces are available"
      stat:
        path: "/usr/bin/xml2-config"
      register: libxml2_devel_present

    - fail:
        msg: "Install package providing libXML2 development tools (e.g. libxml2-devel or similar)"
      when: libxml2_devel_present.stat.isreg is not defined or not libxml2_devel_present.stat.isreg

    - name: "Check whether OpenSSL development pieces are available"
      stat:
        path: "/usr/include/openssl/ssl.h"
      register: openssl_devel_present

    - fail:
        msg: "Install package providing OpenSSL development tools (e.g. openssl-devel, compat-openssl10-devel or similar)"
      when: openssl_devel_present.stat.isreg is not defined or not openssl_devel_present.stat.isreg

      #- name: "Check whether RPM bindings for Python are available"
      #  stat:
      #    path: "/usr/lib64/python2.7/site-packages/rpm"
      #  register: rpm_present

      #- fail:
      #    msg: "Install package providing Python bindings for RPM packages (e.g. python-rpm, python2-rpm or similar)"
      #  when: rpm_present.stat.isdir is not defined or not rpm_present.stat.isdir

    - name: "Check whether yum bindings for Python are available"
      stat:
        path: "/usr/lib/python2.7/site-packages/rpmUtils"
      register: rpmutils_present

    - fail:
        msg: "Install package providing Python bindings for Yum (usually provided by yum or dnf)"
      when: rpmutils_present.stat.isdir is not defined or not rpmutils_present.stat.isdir

    - name: "Check whether krb5.h is available"
      stat:
        path: "/usr/include/krb5.h"
      register: krb5_present

    - fail:
        msg: "Install package providing krb5.h (usually provided by krb5-devel)"
      when: krb5_present.stat.isreg is not defined or not krb5_present.stat.isreg

    - name: "Check whether qe.py is available"
      stat:
        path: "/usr/share/qa-tools/python-modules/qe.py"
      register: qepy_present

    - fail:
        msg: "Install package providing qe.py (usually provided qa-tools-workstation)"
      when: qepy_present.stat.isreg is not defined or not qepy_present.stat.isreg

      #- name: "Check whether Koji Python package is available"
      #stat:
      #  path: "/usr/lib/python2.7/site-packages/koji"
      #register: koji_present

      #- fail:
      #  msg: "Install package providing Python package for Koji (e.g. python-koji or similar)"
      #when: koji_present.stat.isdir is not defined or not koji_present.stat.isdir

      #- name: "Check whether Koji CLI Python package is available"
      #stat:
      #  path: "/usr/lib/python2.7/site-packages/koji_cli"
      #register: koji_cli_present

      #- fail:
      #  msg: "Install package providing Python package for Koji CLI (e.g. python-koji or similar)"
      #when: koji_cli_present.stat.isdir is not defined or not koji_cli_present.stat.isdir

    #
    # Modify `activate` script to set additional variables
    #
    - name: "Force PycURL to use chosen library: '{{ pycurl_ssl_library }}'"
      lineinfile:
        dest: "{{ virtualenv_path }}/bin/activate"
        state: present
        insertafter: EOF
        regexp: '^export PYCURL_SSL_LIBRARY=.*$'
        line: 'export PYCURL_SSL_LIBRARY={{ pycurl_ssl_library }}'

    - name: "Force requests to use system CA bundle"
      lineinfile:
        dest: "{{ virtualenv_path }}/bin/activate"
        state: present
        insertafter: EOF
        regexp: '^export REQUESTS_CA_BUNDLE=.*$'
        line: 'export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-bundle.crt'

    #
    # Inject system packages into the virtualenv
    #
    #- name: "Inject system rpm package into virtualenv"
    #  file:
    #    path: "{{ virtualenv_path }}/lib64/python2.7/site-packages/rpm"
    #    state: link
    #    src: "/usr/lib64/python2.7/site-packages/rpm"

    - name: "Inject system rpmUtils package into virtualenv"
      file:
        path: "{{ virtualenv_path }}/lib64/python2.7/site-packages/rpmUtils"
        state: link
        src: "/usr/lib/python2.7/site-packages/rpmUtils"

    - name: "Inject qe.py into virtualenv"
      file:
        path: "{{ virtualenv_path }}/lib64/python2.7/site-packages/qe.py"
        state: link
        src: "/usr/share/qa-tools/python-modules/qe.py"

      #- name: Inject system koji package into virtualenv
      #file:
      #  path: "{{ virtualenv_path }}/lib64/python2.7/site-packages/koji"
      #  state: link
      #  src: /usr/lib/python2.7/site-packages/koji

      #- name: Inject system koji_cli package into virtualenv
      #file:
      #  path: "{{ virtualenv_path }}/lib64/python2.7/site-packages/koji_cli"
      #  state: link
      #  src: /usr/lib/python2.7/site-packages/koji_cli
