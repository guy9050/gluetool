---

- hosts: 127.0.0.1
  connection: local

  vars:
    requirements_file: "requirements.txt"
    pycurl_ssl_library: "nss"
    install_citool: "yes"
    citool_installation_method: "develop"

  tasks:
    #
    # Check whether installation runs inside an active virtualenv
    #
    - name: "Find virtualenv path"
      set_fact:
        virtualenv_path: "{{ lookup('env', 'VIRTUAL_ENV') }}"

    - fail:
        msg: "This playbook must run inside a virtual environment!"
      when: virtualenv_path == ""

    - debug:
        msg: "Running inside virtualenv '{{ virtualenv_path }}'"

    #
    # Check necessary system packages
    #
    - name: "Check whether cURL development pieces are available"
      stat:
        path: "/usr/bin/curl-config"
      register: libcurl_devel_present

    - fail:
        msg: "Install package providing cURL development tools (e.g. libcurl-devel or similar)"
      when: libcurl_devel_present.stat.isreg is not defined or not libcurl_devel_present.stat.isreg

    - name: "Check whether libxml2 development pieces are available"
      stat:
        path: "/usr/bin/xml2-config"
      register: libxml2_devel_present

    - fail:
        msg: "Install package providing libXML2 development tools (e.g. libxml2-devel or similar)"
      when: libxml2_devel_present.stat.isreg is not defined or not libxml2_devel_present.stat.isreg

    - name: "Check whether OpenSSL development pieces are available"
      stat:
        path: "/usr/include/openssl/ssl.h"
      register: openssl_devel_present

    - fail:
        msg: "Install package providing OpenSSL development tools (e.g. openssl-devel, compat-openssl10-devel or similar)"
      when: openssl_devel_present.stat.isreg is not defined or not openssl_devel_present.stat.isreg

    - name: "Check whether RPM bindings for Python are available"
      stat:
        path: "/usr/lib64/python2.7/site-packages/rpm"
      register: rpm_present

    - fail:
        msg: "Install package providing Python bindings for RPM packages (e.g. python-rpm, python2-rpm or similar)"
      when: rpm_present.stat.isdir is not defined or not rpm_present.stat.isdir

    - name: "Check whether yum bindings for Python are available"
      stat:
        path: "/usr/lib/python2.7/site-packages/rpmUtils"
      register: rpmutils_present

    - fail:
        msg: "Install package providing Python bindings for Yum (usually provided by yum or dnf)"
      when: rpmutils_present.stat.isdir is not defined or not rpmutils_present.stat.isdir

      #- name: "Check whether qe.py is available"
      #stat:
      #  path: "/usr/share/qa-tools/python-modules/qe.py"
      #register: qepy_present

      #- fail:
      #  msg: "Install package providing qe.py (usually provided qa-tools-workstation)"
      #when: qepy_present.stat.isreg is not defined or not qepy_present.stat.isreg

    - name: "Create temporary directory"
      command: "mktemp -d"
      register: tmpdir

    - name: "Upgrade pip to the most recent version"
      pip:
        name: pip
        state: latest
        virtualenv: "{{ virtualenv_path }}"
        extra_args: "--no-cache-dir"

    #
    # Modify `activate` script to set additional variables
    #
    - name: "Force PycURL to use chosen library: '{{ pycurl_ssl_library }}'"
      lineinfile:
        dest: "{{ virtualenv_path }}/bin/activate"
        state: present
        insertafter: EOF
        regexp: '^export PYCURL_SSL_LIBRARY=.*$'
        line: 'export PYCURL_SSL_LIBRARY={{ pycurl_ssl_library }}'

    - name: "Force requests to use system CA bundle"
      lineinfile:
        dest: "{{ virtualenv_path }}/bin/activate"
        state: present
        insertafter: EOF
        regexp: '^export REQUESTS_CA_BUNDLE=.*$'
        line: 'export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-bundle.crt'

    #
    # Install Python requirements
    #
    - name: "Install required Python packages"
      pip:
        requirements: "{{ playbook_dir }}/{{ requirements_file }}"
        state: present
        virtualenv: "{{ virtualenv_path }}"
        extra_args: "--no-cache-dir"
      environment:
        PYCURL_SSL_LIBRARY: "{{ pycurl_ssl_library }}"

    #
    # Inject system packages into the virtualenv
    #
    - name: "Inject system rpm package into virtualenv"
      file:
        path: "{{ virtualenv_path }}/lib64/python2.7/site-packages/rpm"
        state: link
        src: "/usr/lib64/python2.7/site-packages/rpm"

    - name: "Inject system rpmUtils package into virtualenv"
      file:
        path: "{{ virtualenv_path }}/lib64/python2.7/site-packages/rpmUtils"
        state: link
        src: "/usr/lib/python2.7/site-packages/rpmUtils"

      #- name: "Inject qe.py into virtualenv"
      #file:
      #  path: "{{ virtualenv_path }}/lib64/python2.7/site-packages/qe.py"
      #  state: link
      #  src: "/usr/share/qa-tools/python-modules/qe.py"

    #
    # Install koji module
    #
    - name: "Check whether koji module is installed"
      command: "python -c 'import koji'"
      ignore_errors: yes
      register: koji_present

    - name: "Clone koji repository"
      git:
        clone: yes
        repo: "https://pagure.io/koji.git"
        dest: "{{ tmpdir.stdout }}/koji"
      when: koji_present.rc == 1

    - name: "Install koji module"
      command: "make install"
      args:
        chdir: "{{ tmpdir.stdout }}/koji/koji"
      when: koji_present.rc == 1

    - name: "Install koji_cli module"
      command: "make install"
      args:
        chdir: "{{ tmpdir.stdout }}/koji/cli/koji_cli"
      environment:
        DESTDIR: "/"
      when: koji_present.rc == 1

    - name: "Check whether koji module is installed"
      command: "python -c 'import koji'"

    - name: "Check whether koji_cli module is installed"
      command: "python -c 'import koji_cli'"

    #
    # Install citool
    #
    - name: "Install citool"
      command: "python setup.py {{ citool_installation_method }}"
      args:
        chdir: "{{ playbook_dir }}"
      when: install_citool == 'yes'

    - name: "Check citool is usable"
      command: "citool -l"
      when: install_citool == 'yes'
