---

- job:
    name: 'ci-mtf'
    node: mft
    description: |
        Run modular testing framework using OpenStack guests.
    concurrent: true
    display-name: 'ci-mft'
    parameters:
      - string:
          name: pipeline_prepend
          default: ''
          description: 'citool options that will be added at the beginning of citool pipeline'
      - string:
          name: pipeline_append
          default: ''
          description: 'citool options that will be added at the end of citool pipeline'
    triggers:
      - ci-trigger:
          jms-selector: |
            CI_TYPE = 'fedmsg'
            AND topic = 'org.fedoraproject.prod.mbs.module.state.change'
            AND state_name = 'done'
    wrappers:
      - ansicolor:
          colormap: xterm
      - workspace-cleanup
    builders:
      - shell: |
          env
          export CI_MESSAGE
          echo $CI_MESSAGE
          MODULENAME=`echo "$CI_MESSAGE" | egrep -o '"name".*'|sed 's/.*: "\(.*\)".*/\1/'`
          echo "$CI_MESSAGE" > exported-fedmsg.yaml
          citool -c -i -o citool-debug.txt \
                 ${pipeline_prepend}
                 jenkins
                 openstack --user-data=$CITOOL_CONFIG/default-user-data.yaml \
                 mtf --fedmsgfile=exported-fedmsg.yaml --module=$MODULENAME \
                 ${pipeline_append}
      - inject:
          properties-file: envinject-citool.props
    publishers:
      - archive:
          artifacts: '**/**'
          allow-empty: 'true'
      - xunit:
          types:
            - junit:
                pattern: 'avocado/*.xunit'
                requireupdate: true
                deleteoutput: true
                skip-if-no-test-files: false
                stoponerror: false
      - groovy-postbuild:
          on-failure: "failed"
          script: |
              if (manager.getResult() == "SUCCESS") {
                  manager.listener.logger.println("[groovy-postbuild]: Success - cheching result of testing process");
                  manager.addBadge("success.gif", "CI pipeline finished successfully");
                  manager.createSummary("green.gif").appendText("<h1>CI pipeline finished successfully</h1>",
                                                                false, false, false, "green");

                  if (manager.logContains(".* Result of testing: FAIL.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Tests failed");
                      manager.addBadge("delete.gif", "Tests FAILED");
                      manager.createSummary("red.gif").appendText("<h1>Tests failed</h1>",
                                                                  false, false, false, "red");

                  } else if (manager.logContains(".* Result of testing: ERROR.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Tests failed because of errors");
                      manager.addBadge("delete.gif", "Tests FAILED");
                      manager.createSummary("red.gif").appendText("<h1>Tests failed because of errors</h1>",
                                                                  false, false, false, "red");

                  } else if (manager.logContains(".* Result of testing: PASS.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Tests passed");
                      manager.addBadge("success.gif", "Tests PASSED");
                      manager.createSummary("green.gif").appendText("<h1>Tests passed</h1>",
                                                                    false, false, false, "green");

                  } else {
                      manager.listener.logger.println("[groovy-postbuild]: Cannot find result of the testing process");
                      manager.addBadge("warning.gif", "Tests result unknown");
                      manager.addShortText("UNKNOWN");
                      manager.createSummary("red.gif").appendText("<h1>Tests results are unknown</h1>",
                                                                  false, false, false, "red");
                  }
              } else {
                  manager.listener.logger.println("[groovy-postbuild]: Failure - giving up on result search");
                  manager.addBadge("error.gif", "CI pipeline crashed");
                  manager.addBadge("error.gif", "Tests did not run correctly");
                  manager.createSummary("red.gif").appendText("<h1>CI pipeline failed to finish</h1>",
                                                              false, false, false, "red");
                  manager.createSummary("red.gif").appendText("<h1>Tests did not run correctly</h1>",
                                                              false, false, false, "red");
              }
