---

- job:
    name: 'ci-mtf'
    node: mtf
    description: |
        Run modular testing framework using OpenStack guests.
    concurrent: true
    display-name: 'ci-mtf'
    parameters:
      - string:
          name: pipeline_prepend
          default: ''
          description: 'citool options that will be added at the beginning of citool pipeline'
      - string:
          name: pipeline_append
          default: ''
          description: 'citool options that will be added at the end of citool pipeline'
      - string:
          name: timeout_duration
          default: '24h'
          description: 'Kill the build when it is still running after this period of time.'
    triggers:
      - ci-trigger:
          jms-selector:
            CI_TYPE = 'fedmsg'
            AND original_topic = 'org.fedoraproject.prod.mbs.module.state.change'
            AND state_name = 'done'
    wrappers:
      - ansicolor:
          colormap: xterm
      - workspace-cleanup
    builders:
      - shell: |
          timeout --preserve-status --foreground --signal=SIGTERM ${timeout_duration} \
          citool -c -i -o citool-debug.txt \
                 ${pipeline_prepend} \
                 trigger-message --source=environment --env-var=CI_MESSAGE --output-file=trigger-message.yaml \
                 jenkins \
                 ansible \
                 guest-setup --playbooks=${CITOOL_CONFIG}/guest-setup/openstack-mtf.yaml \
                 openstack --user-data=$CITOOL_CONFIG/default-user-data.yaml \
                 guess-openstack-image --method force --image 'Fedora-Cloud-Base-26-compose-latest' \
                 mtf \
                 ${pipeline_append}
    properties:
      - build-discarder:
          num-to-keep: 500
    publishers:
      - archive:
          artifacts: '**/**'
          allow-empty: 'true'
      - groovy-postbuild:
          on-failure: "failed"
          script: |
              if (manager.getResult() == "SUCCESS") {
                  manager.listener.logger.println("[groovy-postbuild]: Success - cheching result of testing process");
                  manager.addBadge("success.gif", "CI pipeline finished successfully");
                  manager.createSummary("green.gif").appendText("<h1>CI pipeline finished successfully</h1>",
                                                                false, false, false, "green");

                  if (manager.logContains(".* Result of testing: FAIL.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Tests failed");
                      manager.addBadge("delete.gif", "Tests FAILED");
                      manager.createSummary("red.gif").appendText("<h1>Tests failed</h1>",
                                                                  false, false, false, "red");

                  } else if (manager.logContains(".* Result of testing: ERROR.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Tests failed because of errors");
                      manager.addBadge("delete.gif", "Tests FAILED");
                      manager.createSummary("red.gif").appendText("<h1>Tests failed because of errors</h1>",
                                                                  false, false, false, "red");

                  } else if (manager.logContains(".* Result of testing: PASS.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Tests passed");
                      manager.addBadge("success.gif", "Tests PASSED");
                      manager.createSummary("green.gif").appendText("<h1>Tests passed</h1>",
                                                                    false, false, false, "green");

                  } else {
                      manager.listener.logger.println("[groovy-postbuild]: Cannot find result of the testing process");
                      manager.addBadge("warning.gif", "Tests result unknown");
                      manager.addShortText("UNKNOWN");
                      manager.createSummary("red.gif").appendText("<h1>Tests results are unknown</h1>",
                                                                  false, false, false, "red");
                  }
              } else {
                  manager.listener.logger.println("[groovy-postbuild]: Failure - giving up on result search");
                  manager.addBadge("error.gif", "CI pipeline crashed");
                  manager.addBadge("error.gif", "Tests did not run correctly");
                  manager.createSummary("red.gif").appendText("<h1>CI pipeline failed to finish</h1>",
                                                              false, false, false, "red");
                  manager.createSummary("red.gif").appendText("<h1>Tests did not run correctly</h1>",
                                                              false, false, false, "red");
              }
