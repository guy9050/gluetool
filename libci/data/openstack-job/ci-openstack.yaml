---

- job:
    name: 'ci-openstack'
    node: openstack
    description: |
        Run tests using restraint and OpenStack guests.
    concurrent: true
    display-name: 'ci-openstack'
    parameters:
      - bool:
          name: reserve
          default: ''
          description: 'Reserve machine after testing for troubleshooting.'
      - string:
          name: reservation_time
          default: '24'
          description: 'Reservation time in hours for troubleshooting. See BaseOS CI User HowTO for more information.'
      - string:
          name: testing_thread_id
          default: ''
          description: 'Testing thread ID.'
      - string:
          name: id
          default: ''
          description: 'Brew task ID.'
      - string:
          name: pipeline_prepend
          default: ''
          description: 'citool options that will be added at the beginning of citool pipeline'
      - string:
          name: pipeline_append
          default: ''
          description: 'citool options that will be added at the end of citool pipeline'
      - string:
          name: build_dependencies_options
          default: ''
          description: 'Additional options for build-dependencies module.'
      - string:
          name: guess_product_options
          default: ''
          description: 'Additional options for guess-product module.'
      - string:
          name: guess_beaker_distro_options
          default: ''
          description: 'Additional options for guess-beaker-distro module.'
      - string:
          name: guess_openstack_image_options
          default: ''
          description: 'Additional options for guess-openstack-image module.'
      - string:
          name: wow_options
          default: ''
          description: 'Additional options for workflow-tomorrow module.'
      - string:
          name: restraint_runner_options
          default: ''
          description: 'Additional options for restraint-runner module.'
      - string:
          name: notify_recipients_options
          default: ''
          description: 'Additional options for notify-recipients module.'
      - string:
          name: notify_email_options
          default: ''
          description: 'Additional options for notify-email module.'
      - string:
          name: timeout_duration
          default: '24h'
          description: 'Kill the build when it is still running after this period of time.'
    properties:
      - build-discarder:
          num-to-keep: 500
      - inject:
          properties-content: |
            # Tell Ansible to store its *.retry file locally, to avoid possible race conditions.
            # Ansible would put them in the playbook directories otherwise.
            RETRY_FILES_SAVE_PATH=$WORKSPACE
    wrappers:
      - ansicolor:
          colormap: xterm
      - workspace-cleanup
    builders:
      - shell: |
           if [ "${reserve}" != "true" ]; then
             openstack_opts=""
             notify_email_opts=""
           else
             openstack_opts="--reserve --reserve-time ${reservation_time}"
             notify_email_opts="--add-reservation"
           fi

           timeout --preserve-status --foreground --signal=SIGTERM ${timeout_duration} \
           citool -c -i -o citool-debug.txt \
             ${pipeline_prepend} \
             notify-recipients ${notify_recipients_options} \
             beah-xunit \
             testing-results \
             testing-thread --id "${testing_thread_id}" \
             brew --task-id $id \
             jenkins \
             brew-build-name \
             build-dependencies ${build_dependencies_options} \
             ansible \
             restraint \
             guest-setup --playbooks=${CITOOL_CONFIG}/guest-setup/openstack-restraint.yaml \
             wow --wow-options="${wow_options}" \
             beah-result-parser \
             openstack ${openstack_opts} \
             guess-product ${guess_product_options} \
             guess-beaker-distro ${guess_beaker_distro_options} \
             guess-openstack-image ${guess_openstack_image_options} \
             restraint-scheduler \
             restraint-runner ${restraint_runner_options} \
             notify-email --add-frontend-url ${notify_email_options} ${notify_email_opts} \
             ${pipeline_append}
    publishers:
      - archive:
          artifacts: '**/**'
          allow-empty: 'true'
      - groovy-postbuild:
          on-failure: "failed"
          script: |
              if (manager.getResult() == "SUCCESS") {
                  manager.listener.logger.println("[groovy-postbuild]: Success - cheching result of testing process");
                  manager.addBadge("success.gif", "CI pipeline finished successfully");
                  manager.createSummary("green.gif").appendText("<h1>CI pipeline finished successfully</h1>",
                                                                false, false, false, "green");

                  if (manager.logContains(".* Result of testing: FAIL.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Tests failed");
                      manager.addBadge("delete.gif", "Tests FAILED");
                      manager.createSummary("red.gif").appendText("<h1>Tests failed</h1>",
                                                                  false, false, false, "red");

                  } else if (manager.logContains(".* Result of testing: ERROR.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Tests failed because of errors");
                      manager.addBadge("delete.gif", "Tests FAILED");
                      manager.createSummary("red.gif").appendText("<h1>Tests failed because of errors</h1>",
                                                                  false, false, false, "red");

                  } else if (manager.logContains(".* Result of testing: PASS.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Tests passed");
                      manager.addBadge("success.gif", "Tests PASSED");
                      manager.createSummary("green.gif").appendText("<h1>Tests passed</h1>",
                                                                    false, false, false, "green");

                  } else if (manager.logContains(".*No tests provided.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Skippped testing because no tests found");
                      manager.addBadge("info.gif", "Testing skipped - no tests found");
                      manager.createSummary("grey.gif").appendText("<h1>Testing skipped</h1>",
                                                                   false, false, false, "grey");
                  } else {
                      manager.listener.logger.println("[groovy-postbuild]: Cannot find result of the testing process");
                      manager.addBadge("warning.gif", "Tests result unknown");
                      manager.addShortText("UNKNOWN");
                      manager.createSummary("red.gif").appendText("<h1>Tests results are unknown</h1>",
                                                                  false, false, false, "red");
                  }
              } else {
                  manager.listener.logger.println("[groovy-postbuild]: Failure - giving up on result search");
                  manager.addBadge("error.gif", "CI pipeline crashed");
                  manager.addBadge("error.gif", "Tests did not run correctly");
                  manager.createSummary("red.gif").appendText("<h1>CI pipeline failed to finish</h1>",
                                                              false, false, false, "red");
                  manager.createSummary("red.gif").appendText("<h1>Tests did not run correctly</h1>",
                                                              false, false, false, "red");
              }
