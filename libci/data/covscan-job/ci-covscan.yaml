---
- job:
    name: 'ci-covscan'
    node: covscan
    description: |
        Managed by Jenkins Job Builder. Do not edit via web.
    concurrent: true
    display-name: 'ci-covscan'
    parameters:
      - string:
          name: id
          default: ''
          description: 'Brew task ID.'
      - string:
          name: testing_thread_id
          default: ''
          description: 'Testing thread ID.'
      - string:
          name: pipeline_prepend
          default: ''
          description: 'citool options that will be added at the beginning of citool pipeline'
      - string:
          name: pipeline_append
          default: ''
          description: 'citool options that will be added at the end of citool pipeline'
      - string:
          name: pipeline_state_reporter_options
          default: ''
          description: 'Additional options for pipeline-state-reporter module.'
      - string:
          name: notify_recipients_options
          default: ''
          description: 'Additional options for notify-recipients module.'
      - string:
          name: notify_email_options
          default: ''
          description: 'Additional options for notify-email module.'
    wrappers:
      - ansicolor:
          colormap: xterm
      - workspace-cleanup
    builders:
      - shell:
          citool -c -i -o citool-debug.txt
                 ${pipeline_prepend}
                 notify-recipients ${notify_recipients_options}
                 testing-results
                 testing-thread --id "${testing_thread_id}"
                 brew --task-id $id
                 jenkins
                 brew-build-name
                 publisher-umb-bus
                 pipeline-state-reporter --category=covscan ${pipeline_state_reporter_options}
                 notify-email-covscan-formatter
                 covscan
                 exporter-resultsdb
                 notify-email ${notify_email_options}
                 ${pipeline_append}
    properties:
      - build-discarder:
          num-to-keep: 500
    publishers:
      - archive:
          artifacts: '*.txt, *.html, *.json, results.xml'
          allow-empty: 'true'
      - groovy-postbuild:
          on-failure: "failed"
          script: |
              if (manager.getResult() == "SUCCESS") {
                  manager.listener.logger.println("[groovy-postbuild]: Success - cheching result of testing process");
                  manager.addBadge("success.gif", "CI pipeline finished successfully");
                  manager.createSummary("green.gif").appendText("<h1>CI pipeline finished successfully</h1>",
                                                                false, false, false, "green");

                  if (manager.logContains(".* Result of testing: FAIL.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Tests failed");
                      manager.addBadge("delete.gif", "Tests FAILED");
                      manager.createSummary("red.gif").appendText("<h1>Tests failed</h1>",
                                                                  false, false, false, "red");

                  } else if (manager.logContains(".* Result of testing: PASS.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Tests passed");
                      manager.addBadge("success.gif", "Tests PASSED");
                      manager.createSummary("green.gif").appendText("<h1>Tests passed</h1>",
                                                                    false, false, false, "green");

                  } else if (manager.logContains(".* Covscan testing failed.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Covscan testing failed");
                      manager.addBadge("error.gif", "Covscan testing failed");
                      manager.createSummary("red.gif").appendText("<h1>Covscan testing failed</h1>",
                                                                    false, false, false, "red");

                  } else if (manager.logContains(".*covscan.*skipping job.*")) {
                      manager.listener.logger.println("[groovy-postbuild]: Skippped testing because build" +
                                                      " target not enabled");
                      manager.addBadge("info.gif", "Testing skipped");
                      manager.createSummary("grey.gif").appendText("<h1>Testing skipped</h1>",
                                                                   false, false, false, "grey");
                  } else {
                      manager.listener.logger.println("[groovy-postbuild]: Cannot find result of the testing process");
                      manager.addBadge("warning.gif", "Tests result unknown");
                      manager.addShortText("UNKNOWN");
                      manager.createSummary("red.gif").appendText("<h1>Tests results are unknown</h1>",
                                                                  false, false, false, "red");
                  }
              } else {
                  manager.listener.logger.println("[groovy-postbuild]: Failure - giving up on result search");
                  manager.addBadge("error.gif", "CI pipeline crashed");
                  manager.addBadge("error.gif", "Tests did not run correctly");
                  manager.createSummary("red.gif").appendText("<h1>CI pipeline failed to finish</h1>",
                                                              false, false, false, "red");
                  manager.createSummary("red.gif").appendText("<h1>Tests did not run correctly</h1>",
                                                              false, false, false, "red");
              }
